package day0918;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

import day0915.Student;
import util.ArrayUtil;

// 학생 등록에 추가적인 메소드를 더만들어보자
// 1. 만약학생번호와 이름이 같은 학생이 입력되면
//    잘못 입력했다고 알려주고
//    중복이 아닌 학생이 입력될때까지 다시 입력을 받자
// 2. 잘못된 점수는 잘못 입력했다고 알려주고
//    올바른 점수가 들어올 때 까지 다시 입력을 받자

public class StudentEx02 {
	private static BufferedReader bufferedReader;
	private static Student[] studentArray;
	
	public static void main(String[] args) throws NumberFormatException, IOException {

		studentArray = new Student[0];
		bufferedReader = new BufferedReader(new InputStreamReader(System.in));
		
		//BufferedReader 를 초기화, 즉 생성자를 호출하고 나서부터는
		//만약 메인 메소드가 다른 메소드를 그 이후에 호출하게 된다면
		//이미 초기화가 된 상태이기 때문에 NullPointerException이 발생하지 않고
		//정상적으로 사용할 수 있다.
		
			showMenu();
	
	}
	private static void showMenu() throws NumberFormatException, IOException {
		while(true) {
			System.out.println("비트 성적 관리 프로그램");
			System.out.println("1. 입력 2. 출력 3. 종료");
			System.out.print("> ");
			int userChoice = Integer.parseInt(bufferedReader.readLine());
			if(userChoice == 1) {
				//입력 메소드 실행
				add();
			}else if(userChoice == 2) {
				//출력 메소드 실행
				printArray();
			}else if(userChoice == 3) {
				System.out.println("사용해주셔서 감사합니다.");
				break;
			}else {
				System.out.println("잘못 입력하셨습니다.");
			}
		}
	}
	
	private static void printArray() throws NumberFormatException, IOException {
		//for(int i = 0; i < studentArray.length; i++) {
			//System.out.println(studentArray[i]); 
			// 이곳의 System.out.println 의 파라미터 값에 studentArray[i] 라는 객체가 들어가서
			//원래는 주소 값이 출력 되어야 하는데 Student 클래스에 toString 메소드를 오버라이딩 하여 값이 나오게 만들어 놓았으므로 값이 출력되게 된다.
			System.out.println("====================");
			System.out.println("번호\t이름");
			System.out.println("====================");
			for(int i = 0; i < studentArray.length; i++) {
				System.out.printf("%d\t%s\n", (i + 1), studentArray[i].getName());
			}
		System.out.println("상세보기할 번호를 눌러주세요( 0 은 뒤로가기 ) : ");
		int userChoice = Integer.parseInt(bufferedReader.readLine()) - 1;
		//만약 userChoice가 올바르지 않으면, 다시 입력을 하도록 시킨다.
		//userChoice가 올바르지 않은 경우는 몇부터 몇인가?
		//userChoice가 -1 미만이거나 studentArray.length - 1 초과이면
		while(userChoice < -1 || userChoice > studentArray.length -1 ) {
			System.out.println("잘못된 번호입니다.");
			System.out.print("상세보기할 번호를 눌러주세요: ");
			userChoice = Integer.parseInt(bufferedReader.readLine()) - 1;
		
		}
		if(userChoice == -1) {
			//메시지 출력
			System.out.println("메뉴로 돌아갑니다.");
		}else {
			//상세보기 메소드 호출
			printOne(userChoice);
		}
		
	}
	
	 private static void printOne(int index) throws NumberFormatException, IOException {
	      System.out.printf("%s학생의 정보\n", studentArray[index].getName());
	      System.out.printf("학번: %d 이름: %s\n", studentArray[index].getId(), studentArray[index].getName());
	      System.out.printf("국어: %03d점 영어: %03d점 수학: %03d점\n", 
	            studentArray[index].getKorean(), studentArray[index].getEnglish(), studentArray[index].getMath());
	      System.out.printf("총점: %03d점 평균: %.2f점\n", studentArray[index].calculateSum(), studentArray[index].calculateAverage());
	      //수정, 삭제를 위한 입력을 받는다.
	      System.out.println("=====================================");
	      System.out.println("1. 수정 2. 삭제 3. 목록으로");
	      int userChoice = Integer.parseInt(bufferedReader.readLine());
	      if(userChoice == 1) {
	         //수정 메소드 호출
	         System.out.print("국어 : ");
	         studentArray[index].setKorean(validateScore()); 
	         System.out.print("영어 : ");
	         studentArray[index].setEnglish(validateScore());
	         System.out.print("수학 : ");
	         studentArray[index].setMath(validateScore());
	      }else if(userChoice == 2) {
	         //삭제 메소드 호출
	         //삭제시에는 정말 삭제하시겠습니까? y/n 물어봐서
	         //다시 요 메소드로 돌아온다.
	         System.out.print("정말 삭제하시겠습니까? (y/n): ");
	         String agree = bufferedReader.readLine();
	         if(agree.equals("y")) {
	            //삭제하고 학생목록 보기로 이동
	            studentArray = ArrayUtil.removeByIndex(studentArray, index);
	            printArray();
	         }else if(agree.equals("n")) {
	            printOne(index);
	         }
	      }else if(userChoice == 3) {
	         printArray();
	      }
	   }

	
	private static void add() throws IOException {
		studentArray = ArrayUtil.add(studentArray, setStudentInfo());
	}
	
	private static Student setStudentInfo() throws IOException {
		
		Student s = new Student();// Student()객체를 생성하고 객체의 자료형은 Student, 이름은 s가 된다.
		
		System.out.print("학생 이름: ");
		s.setName(bufferedReader.readLine());
		
		System.out.print("학생 번호: ");
		s.setId(Integer.parseInt(bufferedReader.readLine()));
		
		// 우리가 이름과 번호를 입력하고 나서
		// 만약 해당 이름과 번호가 중복이면
		// 중복인걸 알려주고
		// 다시 이름과 번호를 입력받게 한
		// 즉 어레이 유틸의 contains의 결과값이 true 인 동안에는
		// 계속 입력받으면 되는 것이다.
		while(ArrayUtil.contains(studentArray,  s)) {
			//중복된 이름과 번호이므로 다시 입력을 받는다.
			System.out.println("중복된 학생입니다.");
			System.out.println("다시 입력해주세요: ");
			System.out.print("학생 이름: ");
			s.setName(bufferedReader.readLine());
			
			System.out.print("학생 번호: ");
			s.setId(Integer.parseInt(bufferedReader.readLine()));
		}
		
		System.out.print("국어 점수: ");
		s.setKorean(validateScore());
		
		System.out.print("영어 점수: ");
		s.setEnglish(validateScore());
	
		System.out.print("수학 점수: ");
		s.setMath(validateScore());
		
		return s;
	}
	
	private static int validateScore() throws NumberFormatException, IOException{
		int score = Integer.parseInt(bufferedReader.readLine());
		
		while(score < 0 || score > 100) {
			System.out.println("잘못 입력하셨습니다.");
			System.out.print("다시 입력해주세요: ");
			score = Integer.parseInt(bufferedReader.readLine());
		}
		return score;
	}
}
